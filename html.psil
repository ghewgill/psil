#!/opt/local/bin/python2.5 psil.py

(import 'cgi)

(define (render-html doc)
    (if (is 'comment (car doc))
        (concat "<!--" (car (cddr doc)) "-->")
        (concat
            (format "<%s" (symbol->string (car doc)))
            (apply concat
                (map (lambda (x)
                             (format " %s=\"%s\""
                                (symbol->string (car x))
                                (.escape cgi (cadr x) True)))
                     (cadr doc)))
            (if (null? (cddr doc))
                " /"
                (concat
                    ">"
                    (apply concat
                        (map
                            (lambda (x)
                                (if (list? x)
                                    (render-html x)
                                    (.escape cgi x)))
                            (cddr doc)))
                    (format "</%s" (symbol->string (car doc)))))
            ">\n")))

;(defmacro a (. rest)
;    (if (null? rest)
;        `'(a ())
;        (if (list? (car rest))
;            `'(a ,(car rest) ,@(cdr rest))
;            `'(a () ,@rest))))

(defmacro define-html-tag (tag)
    `(defmacro ,tag (. rest)
        (if (null? rest)
            `'(,',tag ())
            (if (list? (car rest))
                `(list
                    ',',tag
                    (list ,@(map (lambda (x)
                                   `(list ',(list-ref (car rest) x) ,(list-ref (car rest) (+ 1 x))))
                          (range 0 (len (car rest)) 2)))
                    ,@(cdr rest))
                `(list ',',tag () ,@rest)))))
;(define-html-tag a)

;(print "render direct:")
;(print (render-html '(a ((name "bar") (id "four")) "moo")))
;(print "macroexpand:")
;(print (macroexpand '(a (name (concat "foo" "bar") id "four") "moo")))
;(print "code:")
;(print (a (name "bar" id "four") "moo"))
;(print "render code:")
;(print (render-html (a (name "bar" id "four") "moo")))

;(.exit sys 1)

;(defmacro make-html (tag . body)
;  `(concat ,(format "<%s" (symbol->string (car tag)))
;           ,@(map (lambda (x)
;                          `(format ,(format " %s='%%s'" (symbol->string (list-ref tag x)))
;                                   ,(.escape cgi (list-ref tag (+ 1 x)) True)))
;                  (range 1 (len tag) 2))
;           ,@(if (null? body)
;                '(" /")
;                `(">"
;                    ,@body
;                    ,(format "</%s" (symbol->string (car tag)))))
;           ">\n"))

;(defmacro define-html-tag (tag)
;    `(defmacro ,tag (. rest)
;        (if (null? rest)
;            `(make-html (,',tag))
;            (if (list? (car rest))
;                `(make-html (,',tag ,@(car rest)) ,@(cdr rest))
;                `(make-html (,',tag) ,@rest)))))

(define-html-tag a)
(define-html-tag abbr)
(define-html-tag acronym)
(define-html-tag address)
(define-html-tag area)
(define-html-tag b)
(define-html-tag base)
(define-html-tag bdo)
(define-html-tag big)
(define-html-tag blockquote)
(define-html-tag body)
(define-html-tag br)
(define-html-tag button)
(define-html-tag caption)
(define-html-tag cite)
(define-html-tag code)
(define-html-tag col)
(define-html-tag colgroup)
(define-html-tag dd)
;(define-html-tag del)
(define-html-tag dfn)
(define-html-tag div)
(define-html-tag dl)
(define-html-tag dt)
(define-html-tag em)
(define-html-tag fieldset)
(define-html-tag form)
(define-html-tag h1)
(define-html-tag h2)
(define-html-tag h3)
(define-html-tag h4)
(define-html-tag h5)
(define-html-tag h6)
(define-html-tag head)
(define-html-tag hr)
(define-html-tag html)
(define-html-tag i)
(define-html-tag img)
(define-html-tag input)
(define-html-tag ins)
(define-html-tag kbd)
(define-html-tag label)
(define-html-tag legend)
(define-html-tag li)
(define-html-tag link)
;(define-html-tag map)
(define-html-tag meta)
(define-html-tag noscript)
(define-html-tag object)
(define-html-tag ol)
(define-html-tag optgroup)
(define-html-tag option)
(define-html-tag p)
(define-html-tag param)
(define-html-tag pre)
(define-html-tag q)
(define-html-tag samp)
(define-html-tag script)
(define-html-tag select)
(define-html-tag small)
(define-html-tag span)
(define-html-tag strong)
(define-html-tag style)
(define-html-tag sub)
(define-html-tag sup)
(define-html-tag table)
(define-html-tag tbody)
(define-html-tag td)
(define-html-tag textarea)
(define-html-tag tfoot)
(define-html-tag th)
(define-html-tag thead)
(define-html-tag title)
(define-html-tag tr)
(define-html-tag tt)
(define-html-tag ul)
(define-html-tag var)

(define-html-tag comment)
