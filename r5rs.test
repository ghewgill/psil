>>> from psil import rep

4.1.1 Variable references

>>> rep("(define x 28)")
28
>>> rep("x")
28

4.1.2 Literal expressions

>>> rep("(quote a)")
a
>>> rep("(quote #(a b c))") # (vector) #doctest: +SKIP
#(a b c)
>>> rep("(quote (+ 1 2))")
(+ 1 2)

>>> rep("'a")
a
>>> rep("'#(a b c)") # (vector) #doctest: +SKIP
#(a b c)
>>> rep("'()")
>>> rep("'(+ 1 2)")
(+ 1 2)
>>> rep("'(quote a)")
(quote a)
>>> rep("''a")
(quote a)

>>> rep("'\"abc\"")
"abc"
>>> rep("\"abc\"")
"abc"
>>> rep("'145932")
145932
>>> rep("145932")
145932
>>> rep("'#t")
#t
>>> rep("#t")
#t

4.1.3 Procedure calls

>>> rep("(+ 3 4)")
7
>>> rep("((if #f + *) 3 4)")
12

4.1.4 Procedures

>>> rep("(lambda (x) (+ x x))")
<psil.Function object at 0x...>
>>> rep("((lambda (x) (+ x x)) 4)")
8

>>> rep("""
... (define reverse-subtract
...   (lambda (x y) (- y x)))""")
<psil.Function object at 0x...>
>>> rep("(reverse-subtract 7 10)")
3

>>> rep("""
... (define add4
...   (let ((x 4))
...     (lambda (y) (+ x y))))""") # (macro) #doctest: +SKIP
<psil.Function object at 0x...>
>>> rep("(add4 6)") # (macro) #doctest: +SKIP
10

>>> rep("((lambda x x) 3 4 5 6)")
(3 4 5 6)
>>> rep("""
... ((lambda (x y . z) z) # (dot) #doctest: +SKIP
...  3 4 5 6)""")
(5 6)

4.1.5 Conditionals

>>> rep("(if (> 3 2) 'yes 'no)")
yes
>>> rep("(if (> 2 3) 'yes 'no)")
no
>>> rep("""
... (if (> 3 2)
...     (- 3 2)
...     (+ 3 2))""")
1

4.1.6 Assignments

>>> rep("(define x 2)")
2
>>> rep("(+ x 1)")
3
>>> rep("(set! x 4)")
4
>>> rep("(+ x 1)")
5

4.2.1 Conditionals

>>> rep("""
... (cond ((> 3 2) 'greater)
...       ((< 3 2) 'less))""") # (macro) #doctest: +SKIP
greater
>>> rep("""
... (cond ((> 3 3) 'greater)
...       ((< 3 3) 'less)
...       (else 'equal))""") # (macro) #doctest: +SKIP
equal
>>> rep("""
... (cond ((assv 'b '((a 1) (b 2))) => cadr)
...       (else #f))""") # (macro) #doctest: +SKIP
2

>>> rep("""
... (case (* 2 3)
...   ((2 3 5 7) 'prime)
...   ((1 4 6 8 9) 'composite))""") # (macro) #doctest: +SKIP
composite
>>> rep("""
... (case (car '(c d))
...   ((a) 'a)
...   ((b) 'b))""") # (macro) #doctest: +SKIP
unspecified
>>> rep("""
... (case (car '(c d))
...   ((a e i o u) 'vowel)
...   ((w y) 'semivowel)
...   (else 'consonant))""") # (macro) #doctest: +SKIP
consonant

>>> rep("(and (= 2 2) (> 2 1))") # (macro) #doctest: +SKIP
#t
>>> rep("(and (= 2 2) (< 2 1))") # (macro) #doctest: +SKIP
#f
>>> rep("(and 1 2 'c '(f g))") # (macro) #doctest: +SKIP
(f g)
>>> rep("(and)") # (macro) #doctest: +SKIP
#t

>>> rep("(or (= 2 2) (> 2 1))") # (macro) #doctest: +SKIP
#t
>>> rep("(or (= 2 2) (< 2 1))") # (macro) #doctest: +SKIP
#t
>>> rep("(or #f #f #f)") # (macro) #doctest: +SKIP
#f
>>> rep("""
... (or (memq 'b '(a b c)) 
...     (/ 3 0))""") # (macro) #doctest: +SKIP
(b c)

4.2.2 Binding constructs

>>> rep("""
... (let ((x 2) (y 3))
...   (* x y))""") # (macro) #doctest: +SKIP
6
>>> rep("""
... (let ((x 2) (y 3))
...   (let ((x 7)
...         (z (+ x y)))
...     (* z x)))""") # (macro) #doctest: +SKIP
35

>>> rep("""
... (let ((x 2) (y 3))
...   (let* ((x 7)
...          (z (+ x y)))
...     (* z x)))""") # (macro) #doctest: +SKIP
70

>>> rep("""
... (letrec ((even?
...           (lambda (n)
...             (if (zero? n)
...                 #t
...                 (odd? (- n 1)))))
...          (odd?
...           (lambda (n)
...             (if (zero? n)
...                 #f
...                 (even? (- n 1))))))
...   (even? 88))""") # (macro) #doctest: +SKIP
#t

4.2.3 Sequencing

>>> rep("(define x 0)")
0
>>> rep("""
... (begin (set! x 5)
...        (+ x 1))""") # (macro) #doctest: +SKIP
6
>>> rep("""
... (begin (display "4 plus 1 equals ")
...        (display (+ 4 1)))""") # (macro) #doctest: +SKIP
4 plus 1 equals 
5

4.2.4 Iteration

>>> rep("""
... (do ((vec (make-vector 5))
...      (i 0 (+ i 1)))
...     ((= i 5) vec)
...   (vector-set! vec i i))""") # (macro) #doctest: +SKIP
#(0 1 2 3 4)
>>> rep("""
... (let ((x '(1 3 5 7 9)))
...   (do ((x x (cdr x))
...        (sum 0 (+ sum (car x))))
...       ((null? x) sum)))""") # (macro) #doctest: +SKIP
25

>>> rep("""
... (let loop ((numbers '(3 -2 1 6 -5))
...            (nonneg '())
...            (neg '()))
...   (cond ((null? numbers) (list nonneg neg))
...         ((>= (car numbers) 0)
...          (loop (cdr numbers)
...                (cons (car numbers) nonneg)
...                neg))
...         ((< (car numbers) 0)
...          (loop (cdr numbers)
...                nonneg
...                (cons (car numbers) neg)))))""") # (macro) #doctest: +SKIP
((6 1 3) (-5 -2))

4.2.6 Quasiquotation

>>> rep("`(list ,(+ 1 2) 4)")
(list 3 4)
>>> rep("(let ((name 'a)) `(list ,name ',name))") # (macro) #doctest: +SKIP
(list a (quote a))
>>> rep("`(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b)") # (splice) #doctest: +SKIP
(a 3 4 5 6 b)
>>> rep("`(( foo ,(- 10 3)) ,@(cdr '(c)) . ,(car '(cons)))") # (dot) #doctest: +SKIP
((foo 7) . cons)
>>> rep("`#(10 5 ,(sqrt 4) ,@(map sqrt '(16 9)) 8)") # (vector) #doctest: +SKIP
#(10 5 2 4 3 8)

>>> rep("`(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f)")
(a (quasiquote (b (unquote (+ 1 2)) (unquote (foo 4 d)) e)) f)
>>> rep("""
... (let ((name1 'x)
...       (name2 'y))
...   `(a `(b ,,name1 ,',name2 d) e))""") # (macro) #doctest: +SKIP
(a `(b ,x ,'y d) e)

>>> rep("(quasiquote (list (unquote (+ 1 2)) 4))")
(list 3 4)
>>> rep("'(quasiquote (list (unquote (+ 1 2)) 4))")
(quasiquote (list (unquote (+ 1 2)) 4))

4.3 Macros

5.2.1 Top level declarations

>>> rep("""
... (define add3
...   (lambda (x) (+ x 3)))""")
<psil.Function object at 0x...>
>>> rep("(add3 3)")
6
>>> rep("(define first car)")
<...>
>>> rep("(first '(1 2))")
1

5.2.2 Internal definitions

>>> rep("""
... (let ((x 5))
...   (define foo (lambda (y) (bar x y)))
...   (define bar (lambda (a b) (+ (* a b) a)))
...   (foo (+ x 3)))""") # (macro) #doctest: +SKIP
45

>>> rep("""
... (let ((x 5))
...   (letrec ((foo (lambda (y) (bar x y)))
...            (bar (lambda (a b) (+ (* a b) a))))
...     (foo (+ x 3))))""") # (macro) #doctest: +SKIP
45

6.1 Equivalence predicates

>>> rep("(eqv? 'a 'a)")
#t
>>> rep("(eqv? 'a 'b)")
#f
>>> rep("(eqv? 2 2)")
#t
>>> rep("(eqv? '() '())")
#t
>>> rep("(eqv? 100000000 100000000)") # (intrefs) #doctest: +SKIP
#t
>>> rep("(eqv? (cons 1 2) (cons 1 2))")
#f
>>> rep("""
... (eqv? (lambda () 1)
...       (lambda () 2))""")
#f
>>> rep("(eqv? #f 'nil)")
#f
>>> rep("""
... (let ((p (lambda (x) x)))
...   (eqv? p p))""") # (macro) #doctest: +SKIP
#t

>>> rep("(eq? 'a 'a)")
#t
>>> rep("(eq? '(a) '(a))") # (unspecified) #doctest: +SKIP
unspecified
>>> rep("(eq? (list 'a) (list 'a))")
#f
>>> rep("""(eq? "a" "a")""") # (unspecified) #doctest: +SKIP
unspecified
>>> rep("""(eq? "" "")""") # (unspecified) #doctest: +SKIP
unspecified
>>> rep("(eq? '() '())")
#t
>>> rep("(eq? 2 2)") # (unspecified) #doctest: +SKIP
unspecified
>>> rep("(eq? #\A #\A)") # (char) #doctest: +SKIP
unspecified
>>> rep("(eq? car car)")
#t
>>> rep("""
... (let ((n (+ 2 3)))
...   (eq? n n))""") # (macro) #doctest: +SKIP
unspecified
>>> rep("""
... (let ((x '(a)))
...   (eq? x x))""") # (macro) #doctest: +SKIP
#t
>>> rep("""
... (let ((x '#()))
...   (eq? x x))""") # (macro) #doctest: +SKIP
#t
>>> rep("""
... (let ((p (lambda (x) x)))
...   (eq? p p))""") # (macro) #doctest: +SKIP
#t

>>> rep("(equal? 'a 'a)")
#t
>>> rep("(equal? '(a) '(a))")
#t
>>> rep("(equal? '(a (b) c) '(a (b) c))")
#t
>>> rep("""(equal? "abc" "abc")""")
#t
>>> rep("(equal? 2 2)")
#t
>>> rep("(equal? (make-vector 5 'a) (make-vector 5 'a))") # (vector) #doctest: +SKIP
#t
>>> rep("(equal? (lambda (x) x) (lambda (y) y))") # (unspecified) #doctest: +SKIP
unspecified

6.2 Numbers

>>> rep("(complex? 3+4i)") # (complex) #doctest: +SKIP
#t
>>> rep("(complex? 3)")
#t
>>> rep("(real? 3)")
#t
>>> rep("(real? -2.5+0.0i)") # (complex) #doctest: +SKIP
#t
>>> rep("(real? #e1e10)") # (real) #doctest: +SKIP
#t
>>> rep("(rational? 6/10)") # (rational) #doctest: +SKIP
#t
>>> rep("(rational? 6/3)") # (rational) #doctest: +SKIP
#t
>>> rep("(integer? 3+0i)") # (complex) #doctest: +SKIP
#t
>>> rep("(integer? 3.0)")
#t
>>> rep("(integer? 8/4)") # (rational) #doctest: +SKIP
#t

>>> rep("(exact? 3)")
#t
>>> rep("(exact? 2/3)") # (rational) #doctest: +SKIP
#t
>>> rep("(exact? 3.3)")
#f
>>> rep("(inexact? 2/3)") # (rational) #doctest: +SKIP
#f

>>> rep("(= 1)")
#t
>>> rep("(= 1 2)")
#f
>>> rep("(= 3 3)")
#t
>>> rep("(= 3 3 3)")
#t
>>> rep("(< 1 2 3)")
#t
>>> rep("(< 1 2 3 3)")
#f
>>> rep("(<= 1 2 3 3)")
#t

>>> rep("(zero? -1)")
#f
>>> rep("(zero? 0)")
#t
>>> rep("(positive? 0)")
#f
>>> rep("(positive? 1)")
#t
>>> rep("(negative? -1)")
#t
>>> rep("(odd? -1)")
#t
>>> rep("(even? -1)")
#f
>>> rep("(even? 4)")
#t

>>> rep("(max 3 5 -1 2)")
5
>>> rep("(min 3 5 -1 2)")
-1
>>> rep("(max 3 4)")
4
>>> rep("(max 3.9 4)") # (exact) #doctest: +SKIP
4.0

>>> rep("(+ 3 4) ")
7
>>> rep("(+ 3)")
3
>>> rep("(+)")
0
>>> rep("(* 4)")
4
>>> rep("(*)")
1

>>> rep("(- 3 4)")
-1
>>> rep("(- 3 4 5)")
-6
>>> rep("(- 3)")
-3
>>> rep("(/ 3 4 5)") # (exact) #doctest: +SKIP
3/20
>>> rep("(/ 3)") # (exact) #doctest: +SKIP
1/3

>>> rep("(abs -7)")
7

>>> rep("(modulo 13 4)")
1
>>> rep("(remainder 13 4)")
1
>>> rep("(modulo -13 4)")
3
>>> rep("(remainder -13 4)") # (remainder) #doctest: +SKIP
-1
>>> rep("(modulo 13 -4)")
-3
>>> rep("(remainder 13 -4)") # (remainder) #doctest: +SKIP
1
>>> rep("(modulo -13 -4)")
-1
>>> rep("(remainder -13 -4)")
-1
>>> rep("(remainder -13 -4.0)") # (exact) #doctest: +SKIP
-1.0

>>> rep("(gcd 32 -36)")
4
>>> rep("(gcd)") # (todo) #doctest: +SKIP
0
>>> rep("(lcm 32 -36)") # (todo) #doctest: +SKIP
288
>>> rep("(lcm 32.0 -36)") # (todo) #doctest: +SKIP
288.0
>>> rep("(lcm)") # (todo) #doctest: +SKIP
1

>>> rep("(numerator (/ 6 4))") # (rational) #doctest: +SKIP
3
>>> rep("(denominator (/ 6 4))") # (rational) #doctest: +SKIP
2
>>> rep("(denominator (exact->inexact (/ 6 4)))") # (exact) #doctest: +SKIP
2.0

>>> rep("(floor -4.3)")
-5
>>> rep("(ceiling -4.3)")
-4
>>> rep("(truncate -4.3)")
-4
>>> rep("(round -4.3)")
-4
>>> rep("(floor 3.5)")
3
>>> rep("(ceiling 3.5)")
4
>>> rep("(truncate 3.5)")
3
>>> rep("(round 3.5)")
4
>>> rep("(round 7/2)") # (rational) #doctest: +SKIP
4
>>> rep("(round 7)")
7

>>> rep("(rationalize (inexact->exact .3) 1/10)") # (rational) #doctest: +SKIP
1/3
>>> rep("((rationalize .3 1/10)") # (rational) #doctest: +SKIP
#i1/3

>>> rep("(define pi 3.1415926535897931)")
3.14159265359
>>> rep("(exp 0)")
1.0
>>> rep("(exp 1)")
2.71828182846
>>> rep("(exp (- (* pi 1i)))") # (complex) #doctest: +SKIP
-1.0
>>> rep("(log 1)")
0.0
>>> rep("(sin (/ pi 6))")
0.5
>>> rep("(cos 0)")
1.0
>>> rep("(tan (/ pi 4))")
1.0
>>> rep("(* 2 (asin 1))")
3.14159265359
>>> rep("(acos 1)")
0.0
>>> rep("(* 4 (atan 1))")
3.14159265359
>>> rep("(* 4 (atan 2 2))")
3.14159265359

>>> rep("(sqrt 9)")
3.0

>>> rep("(expt 7 3)")
343.0

>>> rep("(make-rectangular 0 1)") # (complex) #doctest: +SKIP
1.0i
>>> rep("(make-polar 0 1)") # (complex) #doctest: +SKIP
1.0
>>> rep("(real-part 1.0i)") # (complex) #doctest: +SKIP
0.0
>>> rep("(imag-part 1.0i)") # (complex) #doctest: +SKIP
1.0
>>> rep("(magnitude 1.0+1.0i)") # (complex) #doctest: +SKIP
1.414...
>>> rep("(angle 1.0+1.0i)") # (complex) #doctest: +SKIP
(/ pi 4)

>>> rep("(exact->inexact 5)") # (inexact) #doctest: +SKIP
5.0
>>> rep("(inexact->exact 5.0)")
5

>>> rep("(number->string 123)")
"123"
>>> rep("(number->string 123 16)")
"7b"
>>> rep("""(string->number "321")""")
321
>>> rep("""(string->number "0x243")""") # (todo) #doctest: +SKIP
321

6.3 Other data types

6.3.1 Booleans

>>> rep("#t")
#t
>>> rep("#f")
#f
>>> rep("'#f")
#f

>>> rep("(not #t)")
#f
>>> rep("(not 3)")
#f
>>> rep("(not (list 3))")
#f
>>> rep("(not #f)")
#t
>>> rep("(not '())")
#f
>>> rep("(not (list))")
#f
>>> rep("(not 'nil)")
#f

>>> rep("(boolean? #f)")
#t
>>> rep("(boolean? 0)")
#f
>>> rep("(boolean? '())")
#f

6.3.2 Pairs and lists

>>> rep("(define x (list 'a 'b 'c))")
(...
>>> rep("(define y x)")
(...
>>> rep("y")
(a b c)
>>> rep("(list? y)")
#t
>>> rep("(set-cdr! x 4)") # (pair) #doctest: +SKIP
unspecified
>>> rep("x") # (pair) #doctest: +SKIP
(a . 4)
>>> rep("(eqv? x y)") # (pair) #doctest: +SKIP
#t
>>> rep("y") # (pair) #doctest: +SKIP
(a . 4)
>>> rep("(list? y)") # (pair) #doctest: +SKIP
#f
>>> rep("(set-cdr! x x)") # (pair) #doctest: +SKIP
unspecified
>>> rep("(list? x)") # (pair) #doctest: +SKIP
#f

>>> rep("(pair? '(a . b))") # (pair) #doctest: +SKIP
#t
>>> rep("(pair? '(a b c))") # (pair) #doctest: +SKIP
#t
>>> rep("(pair? '())") # (pair) #doctest: +SKIP
#f
>>> rep("(pair? '#(a b))") # (pair) #doctest: +SKIP
#f

>>> rep("(cons 'a '())")
(a)
>>> rep("(cons '(a) '(b c d))")
((a) b c d)
>>> rep("""(cons "a" '(b c))""")
("a" b c)
>>> rep("(cons 'a 3)") # (pair) #doctest: +SKIP
(a . 3)
>>> rep("(cons '(a b) 'c)") # (pair) #doctest: +SKIP
((a b) . c)

>>> rep("(car '(a b c))")
a
>>> rep("(car '((a) b c d))")
(a)
>>> rep("(car '(1 . 2))") # (pair) #doctest: +SKIP
1
>>> rep("(car '())")
Traceback (most recent call last):
TypeError: 'NoneType' object is unsubscriptable

>>> rep("(cdr '((a) b c d))")
(b c d)
>>> rep("(cdr '(1 . 2))") # (pair) #doctest: +SKIP
2
>>> rep("(cdr '())")
Traceback (most recent call last):
TypeError: 'NoneType' object is unsubscriptable

>>> rep("(define (f) (list 'not-a-constant-list))")
<psil.Function object at 0x...>
>>> rep("(define (g) '(constant-list))")
<psil.Function object at 0x...>
>>> rep("(set-car! (f) 3)") # (todo) #doctest: +SKIP
unspecified
>>> rep("(set-car! (g) 3)") # (todo) #doctest: +SKIP
error

>>> rep("(null? 'a)")
#f
>>> rep("(null? '())")
#t

>>> rep("(list? '(a b c))")
#t
>>> rep("(list? '())")
#t
>>> rep("(list? '(a . b))") # (pair) #doctest: +SKIP
#f
>>> rep("""
... (let ((x (list 'a)))
...   (set-cdr! x x)
...   (list? x))""") # (macro) #doctest: +SKIP
#f

>>> rep("(list 'a (+ 3 4) 'c)")
(a 7 c)
>>> rep("(list)")
()

>>> rep("(length '(a b c))")
3
>>> rep("(length '(a (b) (c d e)))")
3
>>> rep("(length '())")
0

>>> rep("(append '(x))")
(x)
>>> rep("(append '(x) '(y))")
(x y)
>>> rep("(append '(a) '(b c d))")
(a b c d)
>>> rep("(append '(a (b)) '((c)))")
(a (b) (c))

>>> rep("(append '(a b) '(c . d))") # (pair) #doctest: +SKIP
(a b c . d)
>>> rep("(append '() 'a)") # (todo) #doctest: +SKIP
a

>>> rep("(reverse '(a b c))")
(c b a)
>>> rep("(reverse '(a (b c) d (e (f))))")
((e (f)) d (b c) a)

>>> rep("(list-tail '(a b c) 2)")
(c)

>>> rep("(list-ref '(a b c d) 2)")
c
>>> rep("(list-ref '(a b c d) (inexact->exact (round 1.8)))")
c

>>> rep("(memq 'a '(a b c))")
(a b c)
>>> rep("(memq 'b '(a b c))")
(b c)
>>> rep("(memq 'a '(b c d))")
#f
>>> rep("(memq (list 'a) '(b (a) c))")
#f
>>> rep("(member (list 'a) '(b (a) c))")
((a) c)
>>> rep("(memq 101 '(100 101 102))") # unspecified
(101 102)
>>> rep("(memv 101 '(100 101 102))")
(101 102)

>>> rep("(define e '((a 1) (b 2) (c 3)))")
((a 1) (b 2) (c 3))
>>> rep("(assq 'a e)")
(a 1)
>>> rep("(assq 'b e)")
(b 2)
>>> rep("(assq 'd e)")
#f
>>> rep("(assq (list 'a) '(((a)) ((b)) ((c))))")
#f
>>> rep("(assoc (list 'a) '(((a)) ((b)) ((c))))")
((a))
>>> rep("(assq 5 '((2 3) (5 7) (11 13)))") # unspecified
(5 7)
>>> rep("(assv 5 '((2 3) (5 7) (11 13)))")
(5 7)
