>>> from psil import read, eval, psil

4.1.1 Variable references

>>> psil("(define x 28)")
28
>>> psil("x")
28

4.1.2 Literal expressions

>>> psil("(quote a)")
<a>
>>> psil("(quote #(a b c))") # (vector) #doctest: +SKIP
#(a b c)
>>> psil("(quote (+ 1 2))")
[<+>, 1, 2]

>>> psil("'a")
<a>
>>> psil("'#(a b c)") # (vector) #doctest: +SKIP
#(a b c)
>>> psil("'()") # (null) #doctest: +SKIP
[]
>>> psil("'(+ 1 2)")
[<+>, 1, 2]
>>> psil("'(quote a)")
[<quote>, <a>]
>>> psil("''a")
[<quote>, <a>]

>>> psil("'\"abc\"")
'abc'
>>> psil("\"abc\"")
'abc'
>>> psil("'145932")
145932
>>> psil("145932")
145932
>>> psil("'#t")
#t
>>> psil("#t")
#t

4.1.3 Procedure calls

>>> psil("(+ 3 4)")
7
>>> psil("((if #f + *) 3 4)")
12

4.1.4 Procedures

>>> psil("(lambda (x) (+ x x))")
<psil.Function object at 0x...>
>>> psil("((lambda (x) (+ x x)) 4)")
8

>>> psil("""
... (define reverse-subtract
...   (lambda (x y) (- y x)))""")
<psil.Function object at 0x...>
>>> psil("(reverse-subtract 7 10)")
3

>>> psil("""
... (define add4
...   (let ((x 4))
...     (lambda (y) (+ x y))))""") # (macro) #doctest: +SKIP
<psil.Function object at 0x...>
>>> psil("(add4 6)") # (macro) #doctest: +SKIP
10

>>> psil("((lambda x x) 3 4 5 6)")
[3, 4, 5, 6]
>>> psil("""
... ((lambda (x y . z) z) # (dot) #doctest: +SKIP
...  3 4 5 6)""")
[5, 6]

4.1.5 Conditionals

>>> psil("(if (> 3 2) 'yes 'no)")
<yes>
>>> psil("(if (> 2 3) 'yes 'no)")
<no>
>>> psil("""
... (if (> 3 2)
...     (- 3 2)
...     (+ 3 2))""")
1

4.1.6 Assignments

>>> psil("(define x 2)")
2
>>> psil("(+ x 1)")
3
>>> psil("(set! x 4)")
4
>>> psil("(+ x 1)")
5

4.2.1 Conditionals

>>> psil("""
... (cond ((> 3 2) 'greater)
...       ((< 3 2) 'less))""") # (macro) #doctest: +SKIP
greater
>>> psil("""
... (cond ((> 3 3) 'greater)
...       ((< 3 3) 'less)
...       (else 'equal))""") # (macro) #doctest: +SKIP
equal
>>> psil("""
... (cond ((assv 'b '((a 1) (b 2))) => cadr)
...       (else #f))""") # (macro) #doctest: +SKIP
2

>>> psil("""
... (case (* 2 3)
...   ((2 3 5 7) 'prime)
...   ((1 4 6 8 9) 'composite))""") # (macro) #doctest: +SKIP
composite
>>> psil("""
... (case (car '(c d))
...   ((a) 'a)
...   ((b) 'b))""") # (macro) #doctest: +SKIP
unspecified
>>> psil("""
... (case (car '(c d))
...   ((a e i o u) 'vowel)
...   ((w y) 'semivowel)
...   (else 'consonant))""") # (macro) #doctest: +SKIP
consonant

>>> psil("(and (= 2 2) (> 2 1))") # (macro) #doctest: +SKIP
#t
>>> psil("(and (= 2 2) (< 2 1))") # (macro) #doctest: +SKIP
#f
>>> psil("(and 1 2 'c '(f g))") # (macro) #doctest: +SKIP
(f g)
>>> psil("(and)") # (macro) #doctest: +SKIP
#t

>>> psil("(or (= 2 2) (> 2 1))") # (macro) #doctest: +SKIP
#t
>>> psil("(or (= 2 2) (< 2 1))") # (macro) #doctest: +SKIP
#t
>>> psil("(or #f #f #f)") # (macro) #doctest: +SKIP
#f
>>> psil("""
... (or (memq 'b '(a b c)) 
...     (/ 3 0))""") # (macro) #doctest: +SKIP
[<b>, <c>]

4.2.2 Binding constructs

>>> psil("""
... (let ((x 2) (y 3))
...   (* x y))""") # (macro) #doctest: +SKIP
6
>>> psil("""
... (let ((x 2) (y 3))
...   (let ((x 7)
...         (z (+ x y)))
...     (* z x)))""") # (macro) #doctest: +SKIP
35

>>> psil("""
... (let ((x 2) (y 3))
...   (let* ((x 7)
...          (z (+ x y)))
...     (* z x)))""") # (macro) #doctest: +SKIP
70

>>> psil("""
... (letrec ((even?
...           (lambda (n)
...             (if (zero? n)
...                 #t
...                 (odd? (- n 1)))))
...          (odd?
...           (lambda (n)
...             (if (zero? n)
...                 #f
...                 (even? (- n 1))))))
...   (even? 88))""") # (macro) #doctest: +SKIP
#t

4.2.3 Sequencing

>>> psil("(define x 0)")
0
>>> psil("""
... (begin (set! x 5)
...        (+ x 1))""") # (macro) #doctest: +SKIP
6
>>> psil("""
... (begin (display "4 plus 1 equals ")
...        (display (+ 4 1)))""") # (macro) #doctest: +SKIP
4 plus 1 equals 
5

4.2.4 Iteration

>>> psil("""
... (do ((vec (make-vector 5))
...      (i 0 (+ i 1)))
...     ((= i 5) vec)
...   (vector-set! vec i i))""") # (macro) #doctest: +SKIP
#(0 1 2 3 4)
>>> psil("""
... (let ((x '(1 3 5 7 9)))
...   (do ((x x (cdr x))
...        (sum 0 (+ sum (car x))))
...       ((null? x) sum)))""") # (macro) #doctest: +SKIP
25

>>> psil("""
... (let loop ((numbers '(3 -2 1 6 -5))
...            (nonneg '())
...            (neg '()))
...   (cond ((null? numbers) (list nonneg neg))
...         ((>= (car numbers) 0)
...          (loop (cdr numbers)
...                (cons (car numbers) nonneg)
...                neg))
...         ((< (car numbers) 0)
...          (loop (cdr numbers)
...                nonneg
...                (cons (car numbers) neg)))))""") # (macro) #doctest: +SKIP
((6 1 3) (-5 -2))

4.2.6 Quasiquotation

>>> psil("`(list ,(+ 1 2) 4)")
[<list>, 3, 4]
>>> psil("(let ((name 'a)) `(list ,name ',name))") # (macro) #doctest: +SKIP
[<list>, <a>, [<quote>, <a>]]
>>> psil("`(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b)") # (splice) #doctest: +SKIP
[<a>, 3, 4, 5, 6, <b>]
>>> psil("`(( foo ,(- 10 3)) ,@(cdr '(c)) . ,(car '(cons)))") # (dot) #doctest: +SKIP
[[<foo>, 7], . <cons>]
>>> psil("`#(10 5 ,(sqrt 4) ,@(map sqrt '(16 9)) 8)") # (vector) #doctest: +SKIP
#(10 5 2 4 3 8)

>>> psil("`(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f)")
[<a>, [<quasiquote>, [<b>, [<unquote>, [<+>, 1, 2]], [<unquote>, [<foo>, 4, <d>]], <e>]], <f>]
>>> psil("""
... (let ((name1 'x)
...       (name2 'y))
...   `(a `(b ,,name1 ,',name2 d) e))""") # (macro) #doctest: +SKIP
(a `(b ,x ,'y d) e)

>>> psil("(quasiquote (list (unquote (+ 1 2)) 4))")
[<list>, 3, 4]
>>> psil("'(quasiquote (list (unquote (+ 1 2)) 4))")
[<quasiquote>, [<list>, [<unquote>, [<+>, 1, 2]], 4]]

4.3 Macros

5.2.1 Top level declarations

>>> psil("""
... (define add3
...   (lambda (x) (+ x 3)))""")
<psil.Function object at 0x...>
>>> psil("(add3 3)")
6
>>> psil("(define first car)")
<...>
>>> psil("(first '(1 2))")
1

5.2.2 Internal definitions

>>> psil("""
... (let ((x 5))
...   (define foo (lambda (y) (bar x y)))
...   (define bar (lambda (a b) (+ (* a b) a)))
...   (foo (+ x 3)))""") # (macro) #doctest: +SKIP
45

>>> psil("""
... (let ((x 5))
...   (letrec ((foo (lambda (y) (bar x y)))
...            (bar (lambda (a b) (+ (* a b) a))))
...     (foo (+ x 3))))""") # (macro) #doctest: +SKIP
45

6.1 Equivalence predicates

>>> psil("(eqv? 'a 'a)")
#t
>>> psil("(eqv? 'a 'b)")
#f
>>> psil("(eqv? 2 2)")
#t
>>> psil("(eqv? '() '())")
#t
>>> psil("(eqv? 100000000 100000000)") # (intrefs) #doctest: +SKIP
#t
>>> psil("(eqv? (cons 1 2) (cons 1 2))")
#f
>>> psil("""
... (eqv? (lambda () 1)
...       (lambda () 2))""")
#f
>>> psil("(eqv? #f 'nil)")
#f
>>> psil("""
... (let ((p (lambda (x) x)))
...   (eqv? p p))""") # (macro) #doctest: +SKIP
#t

>>> psil("(eq? 'a 'a)")
#t
>>> psil("(eq? '(a) '(a))") # (unspecified) #doctest: +SKIP
unspecified
>>> psil("(eq? (list 'a) (list 'a))")
#f
>>> psil("""(eq? "a" "a")""") # (unspecified) #doctest: +SKIP
unspecified
>>> psil("""(eq? "" "")""") # (unspecified) #doctest: +SKIP
unspecified
>>> psil("(eq? '() '())")
#t
>>> psil("(eq? 2 2)") # (unspecified) #doctest: +SKIP
unspecified
>>> psil("(eq? #\A #\A)") # (char) #doctest: +SKIP
unspecified
>>> psil("(eq? car car)")
#t
>>> psil("""
... (let ((n (+ 2 3)))
...   (eq? n n))""") # (macro) #doctest: +SKIP
unspecified
>>> psil("""
... (let ((x '(a)))
...   (eq? x x))""") # (macro) #doctest: +SKIP
#t
>>> psil("""
... (let ((x '#()))
...   (eq? x x))""") # (macro) #doctest: +SKIP
#t
>>> psil("""
... (let ((p (lambda (x) x)))
...   (eq? p p))""") # (macro) #doctest: +SKIP
#t

>>> psil("(equal? 'a 'a)")
#t
>>> psil("(equal? '(a) '(a))")
#t
>>> psil("(equal? '(a (b) c) '(a (b) c))")
#t
>>> psil("""(equal? "abc" "abc")""")
#t
>>> psil("(equal? 2 2)")
#t
>>> psil("(equal? (make-vector 5 'a) (make-vector 5 'a))") # (vector) #doctest: +SKIP
#t
>>> psil("(equal? (lambda (x) x) (lambda (y) y))") # (unspecified) #doctest: +SKIP
unspecified

6.2 Numbers

>>> psil("(complex? 3+4i)") # (complex) #doctest: +SKIP
#t
>>> psil("(complex? 3)")
#t
>>> psil("(real? 3)")
#t
>>> psil("(real? -2.5+0.0i)") # (complex) #doctest: +SKIP
#t
>>> psil("(real? #e1e10)") # (real) #doctest: +SKIP
#t
>>> psil("(rational? 6/10)") # (rational) #doctest: +SKIP
#t
>>> psil("(rational? 6/3)") # (rational) #doctest: +SKIP
#t
>>> psil("(integer? 3+0i)") # (complex) #doctest: +SKIP
#t
>>> psil("(integer? 3.0)")
#t
>>> psil("(integer? 8/4)") # (rational) #doctest: +SKIP
#t

>>> psil("(exact? 3)")
#t
>>> psil("(exact? 2/3)") # (rational) #doctest: +SKIP
#t
>>> psil("(exact? 3.3)")
#f
>>> psil("(inexact? 2/3)") # (rational) #doctest: +SKIP
#f

>>> psil("(= 1)")
#t
>>> psil("(= 1 2)")
#f
>>> psil("(= 3 3)")
#t
>>> psil("(= 3 3 3)")
#t
>>> psil("(< 1 2 3)")
#t
>>> psil("(< 1 2 3 3)")
#f
>>> psil("(<= 1 2 3 3)")
#t

>>> psil("(zero? -1)")
#f
>>> psil("(zero? 0)")
#t
>>> psil("(positive? 0)")
#f
>>> psil("(positive? 1)")
#t
>>> psil("(negative? -1)")
#t
>>> psil("(odd? -1)")
#t
>>> psil("(even? -1)")
#f
>>> psil("(even? 4)")
#t

>>> psil("(max 3 5 -1 2)")
5
>>> psil("(min 3 5 -1 2)")
-1
>>> psil("(max 3 4)")
4
>>> psil("(max 3.9 4)") # (exact) #doctest: +SKIP
4.0

>>> psil("(+ 3 4) ")
7
>>> psil("(+ 3)")
3
>>> psil("(+)")
0
>>> psil("(* 4)")
4
>>> psil("(*)")
1

>>> psil("(- 3 4)")
-1
>>> psil("(- 3 4 5)")
-6
>>> psil("(- 3)")
-3
>>> psil("(/ 3 4 5)") # (exact) #doctest: +SKIP
3/20
>>> psil("(/ 3)") # (exact) #doctest: +SKIP
1/3

>>> psil("(abs -7)")
7

>>> psil("(modulo 13 4)")
1
>>> psil("(remainder 13 4)")
1
>>> psil("(modulo -13 4)")
3
>>> psil("(remainder -13 4)") # (remainder) #doctest: +SKIP
-1
>>> psil("(modulo 13 -4)")
-3
>>> psil("(remainder 13 -4)") # (remainder) #doctest: +SKIP
1
>>> psil("(modulo -13 -4)")
-1
>>> psil("(remainder -13 -4)")
-1
>>> psil("(remainder -13 -4.0)") # (exact) #doctest: +SKIP
-1.0

>>> psil("(gcd 32 -36)")
4
>>> psil("(gcd)") # (todo) #doctest: +SKIP
0
>>> psil("(lcm 32 -36)") # (todo) #doctest: +SKIP
288
>>> psil("(lcm 32.0 -36)") # (todo) #doctest: +SKIP
288.0
>>> psil("(lcm)") # (todo) #doctest: +SKIP
1

>>> psil("(numerator (/ 6 4))") # (rational) #doctest: +SKIP
3
>>> psil("(denominator (/ 6 4))") # (rational) #doctest: +SKIP
2
>>> psil("(denominator (exact->inexact (/ 6 4)))") # (exact) #doctest: +SKIP
2.0

>>> psil("(floor -4.3)")
-5
>>> psil("(ceiling -4.3)")
-4
>>> psil("(truncate -4.3)")
-4
>>> psil("(round -4.3)")
-4
>>> psil("(floor 3.5)")
3
>>> psil("(ceiling 3.5)")
4
>>> psil("(truncate 3.5)")
3
>>> psil("(round 3.5)")
4
>>> psil("(round 7/2)") # (rational) #doctest: +SKIP
4
>>> psil("(round 7)")
7

>>> psil("(rationalize (inexact->exact .3) 1/10)") # (rational) #doctest: +SKIP
1/3
>>> psil("((rationalize .3 1/10)") # (rational) #doctest: +SKIP
#i1/3

>>> psil("(define pi 3.1415926535897931)")
3.1415926535897931
>>> psil("(exp 0)")
1.0
>>> psil("(exp 1)")
2.7182818284590451
>>> psil("(exp (- (* pi 1i)))") # (complex) #doctest: +SKIP
-1.0
>>> psil("(log 1)")
0.0
>>> psil("(sin (/ pi 6))")
0.49999999999999994
>>> psil("(cos 0)")
1.0
>>> psil("(tan (/ pi 4))")
0.99999999999999989
>>> psil("(* 2 (asin 1))")
3.1415926535897931
>>> psil("(acos 1)")
0.0
>>> psil("(* 4 (atan 1))")
3.1415926535897931
>>> psil("(* 4 (atan 2 2))")
3.1415926535897931

>>> psil("(sqrt 9)")
3.0

>>> psil("(expt 7 3)")
343.0

>>> psil("(make-rectangular 0 1)") # (complex) #doctest: +SKIP
1.0i
>>> psil("(make-polar 0 1)") # (complex) #doctest: +SKIP
1.0
>>> psil("(real-part 1.0i)") # (complex) #doctest: +SKIP
0.0
>>> psil("(imag-part 1.0i)") # (complex) #doctest: +SKIP
1.0
>>> psil("(magnitude 1.0+1.0i)") # (complex) #doctest: +SKIP
1.414...
>>> psil("(angle 1.0+1.0i)") # (complex) #doctest: +SKIP
(/ pi 4)

>>> psil("(exact->inexact 5)") # (inexact) #doctest: +SKIP
5.0
>>> psil("(inexact->exact 5.0)")
5

>>> psil("(number->string 123)")
'123'
>>> psil("(number->string 123 16)")
'7b'
>>> psil("""(string->number "321")""")
321
>>> psil("""(string->number "0x243")""") # (todo) #doctest: +SKIP
321

6.3 Other data types

6.3.1 Booleans

>>> psil("#t")
#t
>>> psil("#f")
#f
>>> psil("'#f")
#f

>>> psil("(not #t)")
#f
>>> psil("(not 3)")
#f
>>> psil("(not (list 3))")
#f
>>> psil("(not #f)")
#t
>>> psil("(not '())")
#f
>>> psil("(not (list))")
#f
>>> psil("(not 'nil)")
#f

>>> psil("(boolean? #f)")
#t
>>> psil("(boolean? 0)")
#f
>>> psil("(boolean? '())")
#f
