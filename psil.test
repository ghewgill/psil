>>> from psil import rep

>>> rep("(+ 1 2 3 4)")
10

>>> rep("(define my-age 9)")
9
>>> rep("my-age")
9
>>> rep("(set! my-age 10)")
10
>>> rep("my-age")
10

>>> rep("9")
9
>>> rep("10")
10
>>> rep("my-age")
10
>>> rep("True")
True
>>> rep("False")
False
>>> rep("()")
()
>>> rep("your-age")
Traceback (most recent call last):
    ...
UndefinedSymbolError: your-age

>>> rep("(+ 2 13 45)")
60
>>> rep("(+ my-age 1)")
11
>>> rep("(+ your-age 1)")
Traceback (most recent call last):
    ...
UndefinedSymbolError: your-age
>>> rep("(foo 1 3 4)")
Traceback (most recent call last):
    ...
UndefinedSymbolError: foo

>>> rep("(+ 1 2)")
3
>>> rep("(- 9 5)")
4
>>> rep("(* 3 4 5)")
60
>>> rep("(/ 15 3)") # (exact) #doctest: +SKIP
5

>>> rep("(cons 1 ())")
(1)
>>> rep("(cons 1 (cons 2 ()))")
(1 2)

>>> rep("'a")
a
>>> rep("(cons 'a '(b c d))")
(a b c d)
>>> rep("(list 2 3 4)")
(2 3 4)
>>> rep("(list 'a '(a s d f))")
(a (a s d f))
>>> rep("(append '(a b) '(c d))")
(a b c d)

>>> rep("(car '(a s d f))")
a
>>> rep("(car '((a s) d f))")
(a s)
>>> rep("(cdr '(a s d f))")
(s d f)
>>> rep("(cdr '((a s) d f))")
(d f)
>>> rep("(cdr '((a s) (d f)))")
((d f))
>>> rep("(define a ())")
()
>>> rep("(set! a '(a s d f))")
(a s d f)
>>> rep("(car a)")
a
>>> rep("(cdr a)")
(s d f)
>>> rep("(car (cdr a))")
s

>>> rep("(cons 'a a)")
(a a s d f)
>>> rep("a")
(a s d f)
>>> rep("(set! a (cons 'a a))")
(a a s d f)
>>> rep("a")
(a a s d f)

>>> rep("(len '(1 2 3))")
3
>>> rep("(len a)")
5
>>> rep("(len (append a a))")
10
>>> rep("(len '(append a a))")
3
>>> rep("(len (list a a))")
2

>>> rep("(list? 'a)")
False
>>> rep("(list? a)")
True

>>> rep("(set! my-age (+ my-age 1))")
11
>>> rep("(set! a (cdr a))")
(a s d f)
>>> rep("(define words ())")
()
>>> rep("(set! words '(a list of words))")
(a list of words)
>>> rep("(set! words (cons 'this (cdr words)))")
(this list of words)

#>>> rep("(setf (car words) 'the)")
#the
#>>> rep("words")
#(the list of words)
#>>> rep("(setf (third words) 'is)")
#is
#>>> rep("words")
#(the list is words)
#>>> rep("(setf (cdr words) '(game is up))")
#(game is up)
#>>> rep("words")
#(the game is up)

>>> rep("(define (square x) (* x x))")
<Function square>
>>> rep("(square 2)")
4
>>> rep("(square 1.4142158)")
2.00000632897

>>> rep("(define x 3)")
3
>>> rep("(square 345)")
119025
>>> rep("x")
3
>>> rep("(define (y-plus x) (+ x y))")
<Function y-plus>
>>> rep("(define y 0)")
0
>>> rep("(set! y 2)")
2
>>> rep("(y-plus 4)")
6
>>> rep("(set! x 5)")
5
>>> rep("(y-plus 23)")
25
>>> rep("x")
5
>>> rep("(set! y 27)")
27
>>> rep("(y-plus 43)")
70

>>> rep("(define (fourth-power x) (square (square x)))")
<Function fourth-power>
>>> rep("(fourth-power 2)")
16

>>> rep("""(define (powers-of x)
...   (square x)
...      (fourth-power x))""")
<Function powers-of>
>>> rep("(powers-of 2)")
16
>>> rep("""(define (powers-of x)
...   (set! y (square x))
...   (fourth-power x))""")
<Function powers-of>
>>> rep("y")
27
>>> rep("(powers-of 7)")
2401
>>> rep("y")
49

>>> rep("""(define (absdiff x y)
...  (if (> x y)
...      (- x y)
...      (- y x)))""")
<Function absdiff>
>>> rep("(absdiff 3 4)")
1
>>> rep("(absdiff 4 3)")
1

>>> rep("(define a 1) (define b 2) (define c 3)")
3
>>> rep("`,a")
1
>>> rep("`(a ,b c)")
(a 2 c)
>>> rep("`(a (,b c))")
(a (2 c))
>>> rep("`(a b ,c (',(+ a b c)) (+ a b) 'c '((,a ,b)))")
(a b 3 ((quote 6)) (+ a b) (quote c) (quote ((1 2))))

>>> rep("(defmacro one! (var) `(set! ,var 1))")
<Macro one!>
>>> rep("(one! b)")
1
>>> rep("b")
1

>>> rep("""
... (defmacro let (vars body)
...   `((lambda ()
...      (define ,(car (car vars)) ,(car (cdr (car vars))))
...      ,body)))""")
<Macro let>
>>> rep("a")
1
>>> rep("((lambda () (define a 5) a))")
5
>>> rep("(let ((a 5)) a)")
5
>>> rep("a")
1

>>> rep("(defmacro foo (a . b) `(list ,a ',b))")
<Macro foo>
>>> rep("(macroexpand '(foo 1 2 3))")
(list 1 (quote (2 3)))
>>> rep("(foo 1 2 3)")
(1 (2 3))
