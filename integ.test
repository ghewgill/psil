>>> from psil.interpreter import psil

>>> psil("(abs -5)")
5
>>> psil("(make-list (range 5))")
[0, 1, 2, 3, 4]
>>> psil("(make-list (map (lambda (x) (* x x)) '(1 2 3)))")
[1, 4, 9]
>>> psil("(make-list (map (lambda (x y) (* x y)) '(1 2 3) '(4 5 6)))")
[4, 10, 18]
>>> psil("(import os)") #doctest: +ELLIPSIS
<module 'os' ...>
>>> psil("(getattr os \"name\")")
'posix'
>>> psil("(get os name)")
'posix'

>>> psil("(macroexpand_r '(get foo))")
<foo>
>>> psil("(macroexpand_r '(get foo bar))")
[<getattr>, <foo>, 'bar']
>>> psil("(macroexpand_r '(get foo bar baz))")
[<getattr>, [<getattr>, <foo>, 'bar'], 'baz']
>>> psil("(macroexpand_r '(put! foo bar baz))")
[<setattr>, <foo>, 'bar', <baz>]
>>> psil("(macroexpand_r '(put! foo bar baz quux))")
[<setattr>, [<getattr>, <foo>, 'bar'], 'baz', <quux>]

>>> psil("""(define f (open "integ.test"))""")
<_io.TextIOWrapper name='integ.test' encoding='US-ASCII'>
>>> psil("(.readline f)")
'>>> from psil.interpreter import psil\n'
>>> psil("(.close f)")

>>> psil("(import hashlib)") #doctest: +ELLIPSIS
<module 'hashlib' from '...'>
>>> psil("(define h (.sha1 hashlib))") #doctest: +ELLIPSIS
<sha1 HASH object @ 0x...>
>>> psil("""(.update h (bytes "Hello world" "utf-8"))""")
>>> psil("(.hexdigest h)")
'7b502c3a1f48c8609ae212cdfb639dee39673f5e'
